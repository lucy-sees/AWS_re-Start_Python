{"filter":false,"title":"clean_genbank.py","tooltip":"/clean_genbank.py","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["\"\"\"","Your module description","\"\"\"",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["import re","","def clean_genbank_sequence(file_path):","    \"\"\"","    Cleans a GenBank file by removing ORIGIN, numbers, //, spaces, and line breaks.","    ","    Args:","        file_path (str): Path to the GenBank file.","    ","    Returns:","        str: Cleaned nucleotide sequence.","    \"\"\"","    cleaned_sequence = []","    is_sequence = False","    ","    with open(file_path, 'r') as file:","        for line in file:","            line = line.strip()","            ","            if line.lower().startswith('origin'):","                is_sequence = True","                continue","            if line.startswith('//'):","                break","            if is_sequence:","                # Remove numbers and spaces","                line = re.sub(r'\\d+', '', line)","                line = line.replace(' ', '')","                cleaned_sequence.append(line)","    ","    result = ''.join(cleaned_sequence).lower()","    return result","","# Example usage:","if __name__ == \"__main__\":","    input_file = \"sequence.txt\"  # Replace with your actual GenBank file path","    cleaned_seq = clean_genbank_sequence(input_file)","    ","    print(\"Cleaned Sequence:\")","    print(cleaned_seq)","    ","    # Optionally, save to a new file","    with open(\"cleaned_sequence.txt\", \"w\") as output_file:","        output_file.write(cleaned_seq)",""],"id":2}],[{"start":{"row":42,"column":15},"end":{"row":42,"column":35},"action":"remove","lines":["cleaned_sequence.txt"],"id":3}],[{"start":{"row":42,"column":15},"end":{"row":42,"column":42},"action":"insert","lines":["preproinsulin-seq-clean.txt"],"id":4}],[{"start":{"row":35,"column":18},"end":{"row":35,"column":30},"action":"remove","lines":["sequence.txt"],"id":5}],[{"start":{"row":35,"column":18},"end":{"row":35,"column":45},"action":"insert","lines":["preproinsulin-seq-clean.txt"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"remove","lines":["import re","","def clean_genbank_sequence(file_path):","    \"\"\"","    Cleans a GenBank file by removing ORIGIN, numbers, //, spaces, and line breaks.","    ","    Args:","        file_path (str): Path to the GenBank file.","    ","    Returns:","        str: Cleaned nucleotide sequence.","    \"\"\"","    cleaned_sequence = []","    is_sequence = False","    ","    with open(file_path, 'r') as file:","        for line in file:","            line = line.strip()","            ","            if line.lower().startswith('origin'):","                is_sequence = True","                continue","            if line.startswith('//'):","                break","            if is_sequence:","                # Remove numbers and spaces","                line = re.sub(r'\\d+', '', line)","                line = line.replace(' ', '')","                cleaned_sequence.append(line)","    ","    result = ''.join(cleaned_sequence).lower()","    return result","","# Example usage:","if __name__ == \"__main__\":","    input_file = \"preproinsulin-seq-clean.txt\"  # Replace with your actual GenBank file path","    cleaned_seq = clean_genbank_sequence(input_file)","    ","    print(\"Cleaned Sequence:\")","    print(cleaned_seq)","    ","    # Optionally, save to a new file","    with open(\"preproinsulin-seq-clean.txt\", \"w\") as output_file:","        output_file.write(cleaned_seq)",""],"id":7},{"start":{"row":0,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["import re","import os","","def clean_genbank_sequence(file_path):","    \"\"\"","    Cleans a GenBank-style file by removing unwanted elements","    and overwriting the same file with the cleaned sequence.","    \"\"\"","    cleaned_sequence = []","    is_sequence = False","","    with open(file_path, 'r') as file:","        for line in file:","            line = line.strip()","            if line.lower().startswith('origin'):","                is_sequence = True","                continue","            if line.startswith('//'):","                break","            if is_sequence:","                # Remove numbers and spaces","                line = re.sub(r'\\d+', '', line)","                line = line.replace(' ', '')","                cleaned_sequence.append(line)","","    # Join and convert to lowercase","    result = ''.join(cleaned_sequence).lower()","","    # Overwrite the original file with the cleaned sequence","    with open(file_path, 'w') as file:","        file.write(result)","","    print(f\"‚úÖ Cleaned sequence saved to '{file_path}'.\")","    print(f\"‚úÖ Sequence length: {len(result)} characters.\")","","    if len(result) == 110:","        print(\"üéâ Success! The sequence has exactly 110 amino acid letters.\")","    else:","        print(\"‚ö†Ô∏è Warning: The sequence length is NOT 110. Please check your source data.\")","","if __name__ == \"__main__\":","    input_file = \"preproinsulin-seq-clean.txt\"","    clean_genbank_sequence(input_file)",""]}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":0},"action":"remove","lines":["import re","import os","","def clean_genbank_sequence(file_path):","    \"\"\"","    Cleans a GenBank-style file by removing unwanted elements","    and overwriting the same file with the cleaned sequence.","    \"\"\"","    cleaned_sequence = []","    is_sequence = False","","    with open(file_path, 'r') as file:","        for line in file:","            line = line.strip()","            if line.lower().startswith('origin'):","                is_sequence = True","                continue","            if line.startswith('//'):","                break","            if is_sequence:","                # Remove numbers and spaces","                line = re.sub(r'\\d+', '', line)","                line = line.replace(' ', '')","                cleaned_sequence.append(line)","","    # Join and convert to lowercase","    result = ''.join(cleaned_sequence).lower()","","    # Overwrite the original file with the cleaned sequence","    with open(file_path, 'w') as file:","        file.write(result)","","    print(f\"‚úÖ Cleaned sequence saved to '{file_path}'.\")","    print(f\"‚úÖ Sequence length: {len(result)} characters.\")","","    if len(result) == 110:","        print(\"üéâ Success! The sequence has exactly 110 amino acid letters.\")","    else:","        print(\"‚ö†Ô∏è Warning: The sequence length is NOT 110. Please check your source data.\")","","if __name__ == \"__main__\":","    input_file = \"preproinsulin-seq-clean.txt\"","    clean_genbank_sequence(input_file)",""],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["import re","","def clean_and_split_sequence(input_file):","    \"\"\"","    Cleans the GenBank-like sequence and splits it into specific parts.","    \"\"\"","","    # Step 1: Clean the sequence","    cleaned_sequence = []","    is_sequence = False","","    with open(input_file, 'r') as file:","        for line in file:","            line = line.strip()","            if line.lower().startswith('origin'):","                is_sequence = True","                continue","            if line.startswith('//'):","                break","            if is_sequence:","                # Remove numbers and spaces","                line = re.sub(r'\\d+', '', line)","                line = line.replace(' ', '')","                cleaned_sequence.append(line)","","    # Combine and lowercase the sequence","    full_sequence = ''.join(cleaned_sequence).lower()","","    # Step 2: Verify full sequence length","    full_length = len(full_sequence)","    print(f\"‚úÖ Full cleaned sequence length: {full_length} characters.\")","","    if full_length != 110:","        print(\"‚ö†Ô∏è Warning: Full sequence is NOT exactly 110 characters. Please check the source file.\")","    else:","        print(\"üéâ Success! Full sequence is exactly 110 characters.\")","","    # Step 3: Save the cleaned full sequence","    with open(\"preproinsulin-seq-clean.txt\", \"w\") as file:","        file.write(full_sequence)","","    # Step 4: Extract and save the parts","    parts = {","        \"lsinsulin-seq-clean.txt\": (0, 24),","        \"binsulin-seq-clean.txt\": (24, 54),","        \"cinsulin-seq-clean.txt\": (54, 89),","        \"ainsulin-seq-clean.txt\": (89, 110)","    }","","    for filename, (start, end) in parts.items():","        part_sequence = full_sequence[start:end]","        with open(filename, 'w') as file:","            file.write(part_sequence)","","        length = len(part_sequence)","        print(f\"‚úÖ {filename} saved with {length} characters.\")","        # Extra verification","        expected_lengths = {","            \"lsinsulin-seq-clean.txt\": 24,","            \"binsulin-seq-clean.txt\": 30,","            \"cinsulin-seq-clean.txt\": 35,","            \"ainsulin-seq-clean.txt\": 21","        }","        if length == expected_lengths[filename]:","            print(f\"üéâ {filename} length verified!\")","        else:","            print(f\"‚ö†Ô∏è {filename} length is incorrect. Expected {expected_lengths[filename]} characters.\")","","if __name__ == \"__main__\":","    input_file = \"sequence.txt\"  # Replace with your raw GenBank-like file name","    clean_and_split_sequence(input_file)",""],"id":12}]]},"ace":{"folds":[],"scrolltop":830.0000000000001,"scrollleft":0,"selection":{"start":{"row":71,"column":0},"end":{"row":71,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1740945881159,"hash":"d2688f7434a9099c1af8f35e6d3b682f95266bb8"}